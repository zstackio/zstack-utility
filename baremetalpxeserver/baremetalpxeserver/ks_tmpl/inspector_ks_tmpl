# Use network installation
url --url=ftp://PXESERVER_DHCP_NIC_IP/zstack-dvd
repo --name=qemu-kvm-ev --baseurl=ftp://PXESERVER_DHCP_NIC_IP/zstack-dvd/Extra/qemu-kvm-ev

# Text mode
text

# Hardware inspector
%pre --interpreter /usr/bin/python
import re
import sys
import fcntl
import struct
import socket
import commands

def get_ip_address(mac):
    cmd = "ip -family inet -oneline link show scope global | grep %s | head -n 1 | awk -F ':' '{ printf $2 }'" % mac
    status, output = commands.getstatusoutput(cmd)
    if status:
        return None
    ifname = output.strip()
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return socket.inet_ntoa(fcntl.ioctl(
        s.fileno(),
        0x8915,  # SIOCGIFADDR
        struct.pack('256s', ifname[:15])
    )[20:24])

# ipmi address
cmd0 = r'''modprobe ipmi_watchdog; modprobe ipmi_poweroff; modprobe ipmi_devintf; modprobe ipmi_si; modprobe ipmi_msghandler'''
cmd1 = r'''for i in {1..15}; do ipmitool lan print $i 2>/dev/null && break; done | grep "IP Address\s*:"'''
cmd2 = r'''ipmitool sol info 1 2>/dev/null | grep "Payload Port\s*:"'''
status0, output0 = commands.getstatusoutput(cmd0)
status1, output1 = commands.getstatusoutput(cmd1)
status2, output2 = commands.getstatusoutput(cmd2)
if status1:
    exit

ipmiAddress = output1.strip().split(": ")[1]
if not status2:
    ipmiPort = int(output2.strip().split(": ")[1])
else:
    ipmiPort = 623

# basic
basic_json = '{"ipmiAddress":"%s", "ipmiPort":%d, "type":"basic", "content":"{' % (ipmiAddress, ipmiPort)
# basic -> cpu_model
cmd = 'cat /proc/cpuinfo | egrep "^model name" | awk -F ":[ ]*" \'{ print $2 }\' | uniq | head -n 1'
status, output = commands.getstatusoutput(cmd)
if not status:
    basic_json += '\\"cpu_model\\":\\"%s\\",' % output

# basic -> cpu_core
cmd = 'cat /proc/cpuinfo | egrep "^processor" | wc -l'
status, output = commands.getstatusoutput(cmd)
if not status:
    basic_json += '\\"cpu_core\\":\\"%s\\",' % output

# basic -> memory
cmd = 'cat /proc/meminfo | grep MemTotal: | awk -F ":[ ]*" \'{ print $2 }\' | uniq | head -n 1'
status, output = commands.getstatusoutput(cmd)
if not status:
    basic_json += '\\"memory\\":\\"%s\\",' % output

if basic_json.endswith(','):
    basic_json = basic_json[:-1]
basic_json += '}"}'
cmd = 'curl -X POST -H "Content-Type:application/json" -H "commandpath:/baremetal/chassis/sendhardwareinfo" -d \'%s\' --retry 5 http://PXESERVER_DHCP_NIC_IP:7771/zstack/asyncrest/sendcommand' % basic_json
commands.getstatusoutput(cmd)

# nic
nic_json = '{"ipmiAddress":"%s", "ipmiPort":%d, "type":"nic", "content":"[' % (ipmiAddress, ipmiPort)
cmd = r'''ip route | awk '/default/ { print $5 }' | head -n 1'''
status, pxedev = commands.getstatusoutput(cmd)
cmd = r'''ip -family inet -oneline link show scope global | awk '{ printf "%s %s\n", $2, $(NF-2) }' | egrep -v "^lo:"'''
status, output = commands.getstatusoutput(cmd)
if not status:
    for line in output.split('\n'):
        devname, mac = line.split(": ")
        # get speed of nic
        cmd = r'''ethtool %s | grep 'Speed:' | awk '{ print $NF }' ''' % devname
        status, speed = commands.getstatusoutput(cmd)
        if status: speed = "UNKNOWN"
        # whether pxe boot nic
        pxe = "true" if pxedev == devname else "false"
        # get ip address if pxe boot nic
        ip = get_ip_address(mac) if pxedev == devname else ""
        nic_json += '{\\"devname\\":\\"%s\\", \\"mac\\":\\"%s\\", \\"speed\\":\\"%s\\", \\"pxe\\":\\"%s\\", \\"ip\\":\\"%s\\"},' % (devname, mac, speed, pxe, ip)
    nic_json = nic_json[:-1]
nic_json += ']"}'
cmd = 'curl -X POST -H "Content-Type:application/json" -H "commandpath:/baremetal/chassis/sendhardwareinfo" -d \'%s\' --retry 5 http://PXESERVER_DHCP_NIC_IP:7771/zstack/asyncrest/sendcommand' % nic_json
commands.getstatusoutput(cmd)

# disk
disk_json = '{"ipmiAddress":"%s", "ipmiPort":%d, "type":"disk", "content":"[' % (ipmiAddress, ipmiPort)
cmd = r'''lsblk -P -o NAME,TYPE,SIZE | grep TYPE=\"disk\" | awk '{ print $1 " " $3 }' '''
status, output = commands.getstatusoutput(cmd)
if not status:
    for line in output.split('\n'):
        name, size = re.findall('"([^"]*)"', line)
        disk_json += '{\\"name\\":\\"%s\\", \\"size\\":\\"%s\\"},' % (name, size)
    disk_json = disk_json[:-1]
disk_json += ']"}'
cmd = 'curl -X POST -H "Content-Type:application/json" -H "commandpath:/baremetal/chassis/sendhardwareinfo" -d \'%s\' --retry 5 http://PXESERVER_DHCP_NIC_IP:7771/zstack/asyncrest/sendcommand' % disk_json
commands.getstatusoutput(cmd)

# pxeserver
pxe_json = '{"ipmiAddress":"%s", "ipmiPort":%d, "type":"pxeserver", "content":"PXESERVERUUID"}' %  (ipmiAddress, ipmiPort)
cmd = 'curl -X POST -H "Content-Type:application/json" -H "commandpath:/baremetal/chassis/sendhardwareinfo" -d \'%s\' --retry 5 http://PXESERVER_DHCP_NIC_IP:7771/zstack/asyncrest/sendcommand' % pxe_json
commands.getstatusoutput(cmd)

# poweroff after sending hardware info back to management node
commands.getstatusoutput("poweroff")

%end
