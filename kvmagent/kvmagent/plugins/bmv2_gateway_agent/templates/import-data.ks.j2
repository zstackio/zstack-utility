# Use network installation
url --url={{ network_inst_uri }}

# Text mode
text

# Hardware inspector
%pre --interpreter /bin/bash
if [ ! -f /usr/bin/python ];then
   [ -f /usr/bin/python2 ] && ln -s /usr/bin/python2 /usr/bin/python
   [ -f /usr/bin/python3 ] && ln -s /usr/bin/python3 /usr/bin/python
fi
%end

%pre --interpreter /usr/bin/python
import subprocess
import json
import multiprocessing
import os
import sys
import time

def shell_cmd(cmd, exception=True, workdir=None):
    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE,
                                stderr=subprocess.PIPE, close_fds=True, executable='/bin/bash', cwd=workdir)

    (stdout, stderr) = process.communicate()
    return_code = process.returncode
    if exception and return_code != 0:
        raise Exception("Failed to exec: [{}]".format(cmd))

    # the type of results is bytes in python3
    if sys.version_info.major == 3:
        stdout = stdout.decode()
        stderr = stderr.decode()

    return return_code, stdout.strip(), stderr.strip()

def get_ipmi_info():
    addr = '{{chassis_address}}'
    port = '{{chassis_port}}'
    return {
        'ipmiAddress': addr,
        'ipmiPort': port
    }

def get_dest_dev(dest_wwn):
    cmd = 'lsblk --nodeps --byte --output name,size'
    _, stdout, _ = shell_cmd(cmd)
    for line in stdout.split('\n')[1:]:
        if len(line.split()) != 2:
            continue
        name, size = line.split()
        _, output, _ = shell_cmd("ls -l /dev/disk/by-id | grep %s |grep %s | awk 'NR==1 {print $11}'" % (dest_wwn, name))
        if output != '':
            return "/dev/%s" % name

    raise Exception("Failed to find dest disk[%s]" % dest_wwn)

def get_src_dev():
    cmd = "iscsiadm -m discovery -t sendtargets -p {{gateway_ip}}:3260"
    shell_cmd(cmd)
    time.sleep(1)
    cmd = "iscsiadm --mode node --targetname {{iqn_name}} -p {{gateway_ip}}:3260 --login"
    shell_cmd(cmd)
    time.sleep(1)
    cmd = "systemctl daemon-reload && systemctl restart iscsid"
    shell_cmd(cmd)
    time.sleep(1)
    _, stdout, _ = shell_cmd('iscsiadm -m session --sid 1 -P 3')
    for line in stdout.split('\n'):
        if 'Attached scsi disk' in line:
            dev_name = line.split()[3]
            return "/dev/%s" % dev_name


def convert_data(src, dest):
    cmd = 'dd if=%s of=%s conv=sparse bs=1M status=progress 2>>/root/dd.txt &' % (src, dest)
    _, stdout, _ = shell_cmd(cmd)

def report_dd_progress(src_dev):
    start_progress = 40.0
    end_progress = 90
    total_size = 0
    cmd = 'lsblk %s --nodeps --byte --output SIZE,NAME' % src_dev
    _, stdout, _ = shell_cmd(cmd)
    for line in stdout.split('\n')[1:]:
        if len(line.split()) != 2:
            continue
        total_size = line.split()[0]

    while True:
        time.sleep(5)
        _, stdout, _ = shell_cmd("ps -ef | grep status=progress | grep -v grep | wc -l")
        if int(stdout) == 0:
            break

        _, current_size, _ = shell_cmd("tail -1 /root/dd.txt | awk -v RS='\r' '/copied/ {print $1}' | awk 'END {print}'")
        if current_size is not None:
            current_progress = int(float(start_progress) + 50 * float(current_size) / float(total_size))
            report_progress(str(current_progress))


def report_progress(percentage):
    progress_struct = {}
    progress_struct["threadContextMap"] = {"api":"{{api_id}}", "task-name":"{{task_name}}"}
    progress_struct["progress"] = percentage
    progress_struct["processType"] = "BM2ConvertToLocalDisk"

    cmd = ('curl -X POST -H "Content-Type:application/json" -H "commandpath:/progress/report" -d \'{data}\' '
           '--retry 5 {{ send_progress_info_uri }} ').format(
               data=json.dumps(progress_struct))
    shell_cmd(cmd)

def send_info(result):
    cmd = ('curl -X POST -H "Content-Type:application/json" -d \'{data}\' '
           '--retry 5 {{ send_hardware_infos_uri }} ').format(
               data=json.dumps({"params": result}))
    shell_cmd(cmd)

def main():
    dest_wwn = '{{ dest_disk_wwn }}'
    src_dev = get_src_dev()
    dest_dev = get_dest_dev(dest_wwn)
    result = {}
    result.update(get_ipmi_info())

    convert_info = {}
    convert_info['status'] = 'Converting'
    convert_info['progress'] = 0
    result['convertInfo'] = json.dumps(convert_info)
    result['hardwareInfo'] = ''

    send_info(result)

    convert_data(src_dev, dest_dev)
    report_dd_progress(src_dev)

    convert_info['status'] = 'Converted'
    result['convertInfo'] = json.dumps(convert_info)

    send_info(result)

    shell_cmd("poweroff")

try:
    main()
except Exception as e:
    shell_cmd("touch /root/ks_error_log")
    shell_cmd("echo %s >> /root/ks_error_log" % str(e))
    convert_info = {}
    convert_info['status'] = 'ConvertFailed'
    convert_info['progress'] = 0
    result = {}
    result.update(get_ipmi_info())
    result['convertInfo'] = json.dumps(convert_info)
    result['hardwareInfo'] = ''

    send_info(result)

%end
